True sum: -16.07171931188722
Pred sum: -11.91884902

problem: undercounting!


score per cell:
=================
k=1
cell_1_0: -4.297548712566452 (MATCH)
cell_0_1: -3.923680937528616 (MATCH)

k=2
cell_1_1: -8.338976718510553 (MATCH)
cell_0_2: -9.591458663097452
	> SOMETHING WRONG HERE
	> value by code is -5.8050623; UNDERCOUNTING SOMETHING?


debugging cell (0,2):
======================

emission at (0,2): (-, C)
--------------------------
assert np.allclose( emit_logprobs_at_k.shape, (W, T, C_S, B) )
PASS: variable is expected shape

W=1: corresponds to cell (0,2) in diagonal 2
B=1: sample of interest
squeeze out time, since T=1
np.squeeze( emit_logprobs_at_k[1, ..., 1] ) = [ 0.        , -5.33392242,  0.        ]
PASS: only emission possible is inserting C

np.allclose( samp_e[1], logprob_emit_at_indel[:, 4-3]): 
PASS: this is the log-probability for C at indel sites

CONCLUSION: emissions looks fine, something wrong with message passing


passing MATCH message at (0,2)
--------------------------------
match message is:
P( X_{...,-1}, Y_1, M_{0,2} | t )
this SHOULD be zero, because it's accessing an illegal cell; no -1 position in ancestor X

at line 975: assert np.allclose( alpha.shape, (2, W, T, C_S, B) )
PASS: variable is expected shape 

K=0: corresponds to diagonal k=2
W=1: corresponds to cell (0,2)
squeeze out time, since T=1
C_S=0: corresponds to MATCH state
B=1: sample of interest
np.squeeze( alpha[0,1,:,0,1] ) = -3.4028235e+38
PASS: no logprob here


passing DELETE message at (0,2)
--------------------------------
delete message is:
P( X_{...,-1}, Y_2, D_{0,2} | t )
this SHOULD be zero, because it's accessing an illegal cell; no -1 position in ancestor X

np.allclose( del_transit_message.shape, (W, T, C_transit, B))
PASS: variable is expected shape 

W=1: corresponds to cell (0,2)
squeeze out time, since T=1
squeeze out class, since C_transit=1
B=1: sample of interest
del_message = np.squeeze( del_transit_message[1,...,1] ) = -5.82800077
FAIL: there's logprobability here, when there shouldn't be!

K=0: corresponds to diagonal k=2
W=1: corresponds to cell (0,2)
squeeze out time, since T=1
C_S=2: corresponds to MATCH state
B=1: sample of interest
np.squeeze( alpha[0,1,:,2,1] ) = -5.8280005
FAIL: see above


stepping into get_del_transition_message -> wavefront_cache_lookup()
-------------------------------------------------------
b=1: sample of interest
w=1: corresponds to cell (0,2)
i_minus_one_j[1,1,:] = [-1, 2]
PASS: would need to integrate the cache at [-1, 2] (but this is an invalid!)














	cell (0,2) should only have values for ins, but there's some values for del here...

	\sum_{ R \in \{ M,I,D \}, c \in C_transit } 
      P( Ins, d | R, c, t ) * \alpha_{ X_{...prev_i}, Y_{...prev_j} } ^ { R_c }
	ins transition message is: -4.25753633
	
	\sum_{ R \in \{ M,I,D \}, c \in C_transit } 
      P( Del, d | R, c, t ) * \alpha_{ X_{...prev_i}, Y_{...prev_j} } ^ { R_c }
	del transition message is: -5.82800077 (BAD)

		pad_mask says to grab this value, (GOOD)

		mid_to_state_transit
		Out  [4]: 
		Array([[[-1.90431975],
		        [-1.90431975],
		        [-0.3338553 ]]], dtype=float64)

		cache here only has value for ins, which means previous positions could have only been ins (GOOD)
		[-3.4028235e+38, -3.9236810e+00, -3.4028235e+38]

		before summing over all possible previous states, there's still a value for ins
		alpha_times_transit: [-3.40282347e+38, -5.82800077e+00, -3.40282347e+38]









k=3
cell_1_2: -13.109815540294601

